## Overview

I refactored/created files b/c there are 60+ inputs and I didn't want to have
a jillion lines of code 

## New Files

1. zm_grid_opts.hpp
	
	Purpose: Creates a map with input information so that atmosphere_macro
	can easily iterate over inputs and call m_required_fields.emplace
	
	struct GridOpts contains input name, unit, field layout,
	and isOut (if it is both required and computed)

	func set_grid_opts puts all inputs in map with GridOpts info

	TODO: Implement unit and FieldInfo fields. Running into problems with 
	figuring out the type of the 3rd input in m_required_fields.emplace 
	(because I can't use 'auto' in structs and maps)

2. zm_inputs_initializer

	Similar to p3_inputs_initializer but uses a loop to store device view,
	host mirror, raw ptrs.

## Problems

	1. m_required_fields.emplace() won't accept two type of zm_conv inputs:
		- Inputs with dimensions (t_star, for example) b/c in c++ they 
		must be double ptrs, m_required_fields.emplace with only accept
		 pointers
		- Raw data (ncols, for ex) which must be intialized with references(&)
	As far as I can tell, p3 didn't have to deal with these input types. The 
	globals vars that are still at the top of atmosphere_macro are the one's 
	that I couldn't register as fields

	2. zm_convr() still isn't working (currently commented out), but I think 
	I know what's causing the problem:
	
	Lines 574 - 577 use the following syntax:
		
        qtnd(:,:) = 0.0_r8
        heat(:,:) = 0.0_r8
        mcon(:,:) = 0.0_r8
        rliq(:ncol)   = 0.0_r8

	c++ won't accept (:,:) syntax in fortran. I've tried subing in (pcols,pver) 
	among other things and it's still not working
    
